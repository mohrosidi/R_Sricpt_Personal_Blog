lbls
## Membuat dataframe
# nilai vektor slice
slices <- c(10, 12, 4, 16, 8)
# Vektor label slice
lbls <- c("US", "UK", "Australia", "Germany", "France")
# menghitung persentase masing-masing nilai slice
pct <- round(slices/sum(slices)*100)
# menambahkan persentase pada vektor lbls
lbls <- paste(lbls, pct, "%", sep = " ")
lbls
slices <- c(10, 12, 4, 16, 8)
# Vektor label slice
lbls <- c("US", "UK", "Australia", "Germany", "France")
# menghitung persentase masing-masing nilai slice
pct <- round(slices/sum(slices)*100)
# menambahkan persentase pada vektor lbls
lbls <- paste(lbls, pct, "%", sep = "")
lbls
## Membuat dataframe
# nilai vektor slice
slices <- c(10, 12, 4, 16, 8)
# Vektor label slice
lbls <- c("US", "UK", "Australia", "Germany", "France")
# menghitung persentase masing-masing nilai slice
pct <- round(slices/sum(slices)*100)
# menambahkan persentase pada vektor lbls
lbls <- paste(lbls, pct, sep = " ")
lbls <- paste(lbls,"%", sep = "")
lbls
# membuat pie chart
pie(slices,labels = lbls, col=rainbow(length(lbls)),
main="Pie Chart of Countries")
## Membuat 3D Exploded Pie Chart
pie3D(slices,labels=lbls,explode=0.1,
main="Pie Chart of Countries ")
## Membuat 3D Exploded Pie Chart
library(plotrix)
## Membuat 3D Exploded Pie Chart
install.packages('plotrix')
library(plotrix)
pie3D(slices,labels=lbls,explode=0.1,
main="Pie Chart of Countries ")
## Memuat dataset
df<-Orange
head(df)
str(df)
# membuat plot tunggal
plot(df$age[df$Tree==1], df$circumference[df$Tree==1],
# membuat plot type = "b"
type="b",
xlab='Age (day)',ylab="Circumference (mm)")
# membuat beberapa line graphs type = c("p","l","o","b","c","s")
par(mfrow=c(2,3)) # membagi jendela plot menjadi 2 baris 3 kolom
# menentukan jenis plot
type=c("p","l","o","b","c","s")
# membuat loop plot
for(i in 1:length(type)){
# membuat judul grafik
judul = paste("type=",type[i])
plot(df$age[df$Tree==1], df$circumference[df$Tree==1],
type="n",# membuat plot tanpa titik observasi
main=judul,
# membuat keterangan axis
xlab='Age',ylab="Circumference")
# menambahkan line plot pada plot
lines(df$age[df$Tree==1], df$circumference[df$Tree==1],
# menentukan jenis plot
type=type[i])
}
# mengubah factor menjadi numeric
Orange$Tree <- as.numeric(Orange$Tree)
ntrees<-max(Orange$Tree)
# menghitung range sumbu x dan y
xrange <- range(Orange$age)
yrange <- range(Orange$circumference)
# Set up plot
plot(xrange, yrange, type="n", xlab="Age (days)",
ylab="Circumference (mm)" )
# menentukan warna line tiap grup
colors <- rainbow(ntrees)
# menentukan jenisline tiap grup
linetype <- c(1:ntrees)
# menentukan jenis point line tiap grup
plotchar <- seq(18,18+ntrees,1)
# menambahkan line pada plot yang telah dibuat
for (i in 1:ntrees) {
# membuat subset data berdasarkan grup
tree <- subset(Orange, Tree==i)
# menambahkan line graph type= "b"
lines(tree$age, tree$circumference, type="b", lwd=1.5,
lty=linetype[i], col=colors[i], pch=plotchar[i])
}
# Menambahkan judul dan subjudul
title("Tree Growth","Contoh line plot")
# menambahkan legend
legend(xrange[1], yrange[2], # koordinat legend
1:ntrees, cex=0.8, col=colors,
pch=plotchar, lty=linetype, title="Tree")
?Orange
## Memuat dataset
df<-Orange
head(df)
str(df)
Commander(\)
Commander()
library(Rcmdr)
install.packages('bpa')
?bpa
??bpa
head(df)
mtcars
mtcars
mtcars
## Memuat dataset
df<-mtcars
head(df)
str(df)
## Simple histogram
hist(df$mpg, # menentukan variabel
xlab = "mpg",# menentukan keterangan sumbu x
main = "Histogram")
## Simple histogram dengan warna dan bin custom
hist(df$mpg, # menentukan variabel
xlab = "mpg",# menentukan keterangan sumbu x
main = "Histogram", # menentukan judul grafik
breaks = 12, # menentukan jumlah bin
col="red")
x <- mtcars$mpg
h<-hist(x, breaks=10, col="red", xlab="Miles Per Gallon",
main="Histogram dengan Kurva Normal")
# menentukan parameter kurva normal
xfit<-seq(min(x),max(x),length=40) # parameter sumbu x
yfit<-dnorm(xfit,mean=mean(x),sd=sd(x)) # parameter sumbu y
yfit <- yfit*diff(h$mids[1:2])*length(x)
lines(xfit, yfit, col="blue", lwd=2) # menambahkan garis kurva normal
## Density plot
d <- density(mtcars$mpg) # menghitung densitas data
plot(d) # plot hasil
## Density plot dengan fill custom
d <- density(mtcars$mpg)
plot(d, main="Density Plot MPG")
polygon(d, col="red", border="blue")
## Density plot berdasarkan grup
library(sm)
## Density plot berdasarkan grup
install.packages('sm')
## Density plot berdasarkan grup
library(sm)
attach(mtcars)
??sm
# Membuat label pada factor
cyl.f <- factor(cyl, levels= c(4,6,8),
labels = c("4 cylinder", "6 cylinder", "8 cylinder"))
# plot densitas
sm.density.compare(mpg, cyl, xlab="Miles Per Gallon")
title(main="Distribusi MPG Berdasarkan Cyl")
# Menambahkan legend via mouse click
colfill<-c(2:(2+length(levels(cyl.f))))
legend(locator(1), levels(cyl.f), fill=colfill)
# Membuat label pada factor
cyl.f <- factor(cyl, levels= c(4,6,8),
labels = c("4 cylinder", "6 cylinder", "8 cylinder"))
# plot densitas
sm.density.compare(mpg, cyl, xlab="Miles Per Gallon")
title(main="Distribusi MPG Berdasarkan Cyl")
# Menambahkan legend via mouse click
colfill<-c(2:(2+length(levels(cyl.f))))
legend(locator(1), levels(cyl.f), fill=colfill)
# Membuat label pada factor
cyl.f <- factor(cyl, levels= c(4,6,8),
labels = c("4 cylinder", "6 cylinder", "8 cylinder"))
# plot densitas
sm.density.compare(mpg, cyl, xlab="Miles Per Gallon")
title(main="Distribusi MPG Berdasarkan Cyl")
# Menambahkan legend via mouse click
colfill<-c(2:(2+length(levels(cyl.f))))
legend(locator(1), levels(cyl.f), fill=colfill)
df<-mtcars
head(df)
str(df)
## Simple histogram
hist(df$mpg, # menentukan variabel
xlab = "mpg",# menentukan keterangan sumbu x
main = "Histogram")
## Simple histogram
hist(df$mpg, # menentukan variabel
xlab = "Miles Per Gallon",# menentukan keterangan sumbu x
main = "Histogram MPG")
## Simple histogram dengan warna dan bin custom
hist(df$mpg, # menentukan variabel
xlab = "mpg",# menentukan keterangan sumbu x
main = "Histogram MPG", # menentukan judul grafik
breaks = 12, # menentukan jumlah bin
col="red")
## Histogram dengan kurva distribusi normal
x <- mtcars$mpg
h<-hist(x, breaks=10, col="red", xlab="Miles Per Gallon",
main="Histogram dengan Kurva Normal")
# menentukan parameter kurva normal
xfit<-seq(min(x),max(x),length=40) # parameter sumbu x
yfit<-dnorm(xfit,mean=mean(x),sd=sd(x)) # parameter sumbu y
yfit <- yfit*diff(h$mids[1:2])*length(x)
lines(xfit, yfit, col="blue", lwd=2) # menambahkan garis kurva normal
## Density plot
d <- density(mtcars$mpg) # menghitung densitas data
plot(d) # plot hasil
## Density plot dengan fill custom
d <- density(mtcars$mpg)
plot(d, main="Density Plot MPG")
polygon(d, col="red", border="blue")
## Density plot berdasarkan grup
library(sm)
attach(mtcars)
# Membuat label pada factor
cyl.f <- factor(cyl, levels= c(4,6,8),
labels = c("4 cylinder", "6 cylinder", "8 cylinder"))
# plot densitas
sm.density.compare(mpg, cyl, xlab="Miles Per Gallon")
title(main="Distribusi MPG Berdasarkan Cyl")
# Menambahkan legend via mouse click
colfill<-c(2:(2+length(levels(cyl.f))))
legend(locator(1), levels(cyl.f), fill=colfill)
# Membuat label pada factor
cyl.f <- factor(cyl, levels= c(4,6,8),
labels = c("4 cylinder", "6 cylinder", "8 cylinder"))
# plot densitas
sm.density.compare(mpg, cyl, xlab="Miles Per Gallon")
title(main="Distribusi MPG Berdasarkan Cyl")
# Menambahkan legend via mouse click
colfill<-c(2:(2+length(levels(cyl.f))))
legend(locator(2), levels(cyl.f), fill=colfill)
# Membuat label pada factor
cyl.f <- factor(cyl, levels= c(4,6,8),
labels = c("4 cylinder", "6 cylinder", "8 cylinder"))
# plot densitas
sm.density.compare(mpg, cyl, xlab="Miles Per Gallon")
title(main="Distribusi MPG Berdasarkan Cyl")
# Menambahkan legend via mouse click
colfill<-c(2:(2+length(levels(cyl.f))))
legend(locator(2), levels(cyl.f), fill=colfill)
# Membuat label pada factor
cyl.f <- factor(cyl, levels= c(4,6,8),
labels = c("4 cylinder", "6 cylinder", "8 cylinder"))
# plot densitas
sm.density.compare(mpg, cyl, xlab="Miles Per Gallon")
title(main="Distribusi MPG Berdasarkan Cyl")
# Menambahkan legend via mouse click
colfill<-c(2:(2+length(levels(cyl.f))))
legend(locator(2), levels(cyl.f), fill=colfill)
# Membuat label pada factor
cyl.f <- factor(cyl, levels= c(4,6,8),
labels = c("4 cylinder", "6 cylinder", "8 cylinder"))
# plot densitas
sm.density.compare(mpg, cyl, xlab="Miles Per Gallon")
title(main="Distribusi MPG Berdasarkan Cyl")
# Menambahkan legend via mouse click
colfill<-c(2:(2+length(levels(cyl.f))))
legend(locator(2), levels(cyl.f), fill=colfill)
# Membuat label pada factor
cyl.f <- factor(cyl, levels= c(4,6,8),
labels = c("4 cylinder", "6 cylinder", "8 cylinder"))
# plot densitas
sm.density.compare(mpg, cyl, xlab="Miles Per Gallon")
title(main="Distribusi MPG Berdasarkan Cyl")
# Menambahkan legend via mouse click
colfill<-c(2:(2+length(levels(cyl.f))))
legend(locator(2), levels(cyl.f), fill=colfill)
devtools::install_github("aswansyahputra/nusadata")
devtools::install_github("aswansyahputra/nusadata")
install_github("aswansyahputra/nusadata")
devtools::install_github("aswansyahputra/nusadata")
library(readxl)
jumlahkecelakaankorbanmatilukaberatlukaringandankerugianmateri2 <- read_excel("D:/R Training/Blog/Dataset/jumlahkecelakaankorbanmatilukaberatlukaringandankerugianmateri2.xls")
View(jumlahkecelakaankorbanmatilukaberatlukaringandankerugianmateri2)
## Data Manipulation
library(dplyr)
## Dataset
head(jumlahkecelakaankorbanmatilukaberatlukaringandankerugianmateri2)
head(jumlahkecelakaankorbanmatilukaberatlukaringandankerugianmateri2)
glimpse(jumlahkecelakaankorbanmatilukaberatlukaringandankerugianmateri2)
head(df
)
head(df)
df<-jumlahkecelakaankorbanmatilukaberatlukaringandankerugianmateri2
head(df)
gather(df,df[1],df[2:23])
## Data Manipulation
library(dplyr)
gather(df,df[1],df[2:23])
# get first observation for each Species in iris data -- base R
mini_iris <- iris[c(1, 51, 101), ]
# gather Sepal.Length, Sepal.Width, Petal.Length, Petal.Width
gather(mini_iris, key = flower_att, value = measurement,
Sepal.Length, Sepal.Width, Petal.Length, Petal.Width)
## Data Manipulation
library(dplyr)
# get first observation for each Species in iris data -- base R
mini_iris <- iris[c(1, 51, 101), ]
# gather Sepal.Length, Sepal.Width, Petal.Length, Petal.Width
gather(mini_iris, key = flower_att, value = measurement,
Sepal.Length, Sepal.Width, Petal.Length, Petal.Width)
## Data Manipulation
library(dplyr)
## Data Manipulation
library(dplyr)
# get first observation for each Species in iris data -- base R
mini_iris <- iris[c(1, 51, 101), ]
# gather Sepal.Length, Sepal.Width, Petal.Length, Petal.Width
gather(mini_iris, key = flower_att, value = measurement,
Sepal.Length, Sepal.Width, Petal.Length, Petal.Width)
# gather Sepal.Length, Sepal.Width, Petal.Length, Petal.Width
gather(mini_iris, key = flower_att, value = measurement,
Sepal.Length, Sepal.Width, Petal.Length, Petal.Width)
## Data Manipulation
library(dplyr)
library(readxl)
df <- read_excel("D:/R Training/Blog/Dataset/jumlahkecelakaankorbanmatilukaberatlukaringandankerugianmateri2.xls")
View(df)
## Data Manipulation
library(dplyr)
head(df)
glimpse(df)
gather(df,kecelakaan,df[2:23])
## Data Manipulation
library(tidyverse)
head(df)
glimpse(df)
gather(df,kecelakaan,df[2:23])
tidyr::gather(df,kecelakaan,df[2:23])
df<-as.tibble(df)
df<-as_tibble(df)
glimpse(df)
gather(df,key=kecelakaan,value=df[2:23])
# get first observation for each Species in iris data -- base R
mini_iris <- iris[c(1, 51, 101), ]
# gather Sepal.Length, Sepal.Width, Petal.Length, Petal.Width
gather(mini_iris, key = flower_att, value = measurement,
Sepal.Length, Sepal.Width, Petal.Length, Petal.Width)
View(mini_iris)
View(mini_iris)
# get first observation for each Species in iris data -- base R
mini_iris <- iris[c(1, 51, 101), ]
# gather Sepal.Length, Sepal.Width, Petal.Length, Petal.Width
gather(mini_iris, key = flower_att, value = measurement,
Sepal.Length, Sepal.Width, Petal.Length, Petal.Width)
gather(df,key=kecelakaan,value=df[2:23])
value<-df[2:3]
value
value<-df[2:23]
value
gather(df,key=kecelakaan,value=value)
# get first observation for each Species in iris data -- base R
mini_iris <- iris[c(1, 51, 101), ]
# gather Sepal.Length, Sepal.Width, Petal.Length, Petal.Width
gather(mini_iris, key = flower_att, value = measurement,
Sepal.Length, Sepal.Width, Petal.Length, Petal.Width)
glimpse(df)
gather(df,key=kecelakaan,value=value)
library(readxl)
jumlahkecelakaankorbanmatilukaberatlukaringandankerugianmateri2 <- read_excel("D:/R Training/Blog/Dataset/jumlahkecelakaankorbanmatilukaberatlukaringandankerugianmateri2.xls")
View(jumlahkecelakaankorbanmatilukaberatlukaringandankerugianmateri2)
df<-jumlahkecelakaankorbanmatilukaberatlukaringandankerugianmateri2
head(df)
df<-as_tibble(df)
glimpse(df)
gather(df,key=jenis_kecelakaan,value=value)
df<-jumlahkecelakaankorbanmatilukaberatlukaringandankerugianmateri2
head(df)
df<-as_tibble(df)
glimpse(df)
gather(df,key=jenis_kecelakaan,value=value,-kecelakaan)
gather(df,key=jenis_kecelakaan,value=value,-Kecelakaan)
gather(df,key=tahun,value=value,-Kecelakaan)
df<-gather(df,key=tahun,value=value,-Kecelakaan)
plot(df)
glimpse(df)
df[2]<-as.numeric(df[2])
df[2]<-as.numeric(df[2])
df[2]<-as.integer(df[2])
glimpse(df)
library(readxl)
jumlahkecelakaankorbanmatilukaberatlukaringandankerugianmateri2 <- read_excel("D:/R Training/Blog/Dataset/jumlahkecelakaankorbanmatilukaberatlukaringandankerugianmateri2.xls")
df<-jumlahkecelakaankorbanmatilukaberatlukaringandankerugianmateri2
head(df)
df<-as_tibble(df)
glimpse(df)
df<-gather(df,key=tahun,value=value,-Kecelakaan)
glimpse(df)
df<-df%>%
mutate(Kecelakaan=as.factor(Kecelakaan))
df<-df%>%
mutate(Kecelakaan=as.factor(Kecelakaan),tahun=as.integer(tahun))
glimpse(df)
plot(df)
plot(df,type="b")
plot(df$tahun,df$Kecelakaan,type="b")
plot(df$tahun,df$value,type="b")
ggplot(df,aes(tahun,value,col=Kecelakaan))+
geom_point()+
geom_line()
library(readxl)
df <- read_excel("D:/R Training/Blog/Dataset/jumlahkecelakaankorbanmatilukaberatlukaringandankerugianmateri2.xls")
View(df)
df<-as_tibble(df)
library(tidyverse)
df<-as_tibble(df)
glimpse(df)
gather(df,Kecelakaan,value)
gather(df,Kecelakaan,value,-Kecelakaan)
glimpse(df)
gather(df,Kecelakaan,value,-Kecelakaan)
gather(df,Kecelakaan,Tahun, Nilai,-Kecelakaan)
gather(df,Kecelakaan,Tahun,Nilai,-Kecelakaan)
gather(df,key=Kecelakaan,value=c(Tahun,Nilai),-Kecelakaan)
gather(df,kecelakaan,Nilai,-Kecelakaan)
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
stocks<-as_tibble(stocks)
stocksm <- stocks %>% gather(stock, price, -time)
stocksm
stocksm %>% spread(stock, price)
gather(df,tahun,Nilai,-Kecelakaan)
s<-gather(df,tahun,Nilai,-Kecelakaan)
spread(s,tahun,parameter.kecelakaan,-tahun)
spread(s,parameter kecelakaan,nilai,-tahun)
spread(s,parameter_kecelakaan,nilai,-tahun)
stocksm %>% spread(stock, price)
spread(s,value)
s
spread(s,Nilai)
s<-gather(df,tahun,Nilai,-Kecelakaan)
spread(s,Nilai)
spread(s,Tahun,Nilai)
spread(s,tahun,Nilai)
spread(s,Kecelakaan,Nilai)
clean<-spread(s,Kecelakaan,Nilai)
plot(clean)
par(mfrow=6,4)
par(mfrow=c(6,4))
for(i in 2:ncol(clean)){
plot(df[1],df[i],type="b")
}
ncol(clean)
nrow(clean)
View(clean)
par(mfrow=c(3,2))
for(i in 2:ncol(clean)){
plot(df[1],df[i],type="b")
}
plot(clean[1],clean[i],type="b")
for(i in 2:ncol(clean)){
plot(clean[1],clean[i],type="b")
}
plot(clean[1],clean[i],type="b")
col<-2:ncol(clean)
col
for(i in 2:as.numeric(ncol(clean)){
for(i in 2:as.numeric(ncol(clean)){
n<-as.numeric(ncol(clean))
for(i in 2:n){
plot(clean[1],clean[i],type="b")
}
clean[1]
2:3
plot(clean[1],clean[2])
glimpse(clean)
clean[1]<-as.integer(clean[1])
clean[1]<-as.numeric(clean[1])
clean[1]<-as.numeric(clean[1])
clean<-as.data.frame(clean)
str(clean)
clean[1]<-as.numeric(clean[1])
clean[1]<-as.numeric(as.vector(clean[1]))
clean[1]<-as.matrix(clean[1])
clean[1]<-as.numeric(as.matrix(clean[1]))
par(mfrow=c(3,2))
n<-ncol(clean)
for(i in 2:n){
plot(clean[1],clean[i],type="b")
}
plot(clean[1],clean[i],type="c")
plot(clean[1],clean[2])
str(clean)
for(i in 2:n){
plot(clean[1],clean[i],type="l")
}
plot(clean[1],clean[2],type="b")
## Memuat dataset
df<-mtcars
head(df)
str(df)
?hist
## Density plot
d <- density(mtcars$mpg) # menghitung densitas data
d
plot(d) # plot hasil
library(Rcmdr)
setwd("D:/R Training/Blog/Dataset")
df<-read.csv("CO2.csv")
head(df)
str(df)
library(ggplot2)
df<-read.csv("GHG.csv")
head(df)
str(df)
g<-ggplot(df, aes(TIME,Value,color=ï..LOCATION))
g + geom_line()
